{"ast":null,"code":"import axios from \"axios\";\nimport apis from \"../../helper/Apis\";\nimport Auth from \"../../helper/Auth\";\nimport { ActionTypes } from \"../action-types\";\nexport const getAllTestStudentAction = () => {\n  return async dispatch => {\n    const response = await axios.get(apis.BASE + apis.GET_ALL_TEST_STUDNET, {\n      headers: {\n        'Authorization': `Bearer ${Auth.retriveToken()}`\n      }\n    });\n    console.log(response.data);\n\n    if (response.data.success) {\n      dispatch({\n        type: ActionTypes.GET_ALL_TESTS,\n        payload: {\n          testlist: response.data.testlist\n        }\n      });\n    }\n  };\n};\nexport const getUpcomingTestsStudentAction = () => {\n  return async dispatch => {\n    const response = await axios.get(apis.BASE + apis.GET_UPCOMING_TESTS_STUDENT, {\n      headers: {\n        'Authorization': `Bearer ${Auth.retriveToken()}`\n      }\n    });\n\n    if (response.data.success) {\n      dispatch({\n        type: ActionTypes.GET_UPCOMING_TESTS_STUDENT,\n        payload: {\n          testlist: response.data.upcomingtestlist\n        }\n      });\n    }\n  };\n};\nexport const getCompletedTestsStudentAction = () => {\n  return async dispatch => {\n    const response = await axios.get(apis.BASE + apis.GET_ALL_COMPLETED_TEST_STUDENT, {\n      headers: {\n        'Authorization': `Bearer ${Auth.retriveToken()}`\n      }\n    });\n\n    if (response.data.success) {\n      dispatch({\n        type: ActionTypes.GET_ALL_COMPLETED_TEST_STUDENT,\n        payload: {\n          testlist: response.data.completedtestlist\n        }\n      });\n    }\n  };\n};\nexport const studentTestRegister = details => {\n  return async dispatch => {\n    axios.post(apis.BASE + apis.STUDENT_TEST_REGISTER, details, {\n      headers: {\n        'Authorization': `Bearer ${Auth.retriveToken()}`\n      }\n    }).then(response => {\n      if (response.data.success) {\n        dispatch({\n          type: ActionTypes.CHANGE_TEST_REGISTER,\n          payload: {\n            id: details.testid\n          }\n        });\n      } else {\n        console.error(response.data);\n        dispatch({\n          type: ActionTypes.SET_ALERT,\n          payload: {\n            isAlert: true,\n            type: 'error',\n            title: 'error in change status',\n            message: response.data.message\n          }\n        });\n      }\n    });\n  };\n};\nexport const getTestById = details => {\n  return async dispatch => {\n    const response = await axios.post(apis.BASE + apis.GET_TEST_DETAILS_BY_ID, details, {\n      headers: {\n        'Authorization': `Bearer ${Auth.retriveToken()}`\n      }\n    });\n\n    if (response.data.success) {\n      dispatch({\n        type: ActionTypes.VIEW_TEST_DETAILS,\n        payload: {\n          test: response.data.test\n        }\n      });\n    } else {\n      dispatch({\n        type: ActionTypes.SET_ALERT,\n        payload: {\n          isAlert: true,\n          title: \"Could not get test details\",\n          type: \"error\",\n          message: response.data.message\n        }\n      });\n    }\n  };\n};\nexport const getTestResultStudent = details => {\n  return async dispatch => {\n    var response = await axios.post(apis.BASE + apis.GET_TEST_RESULT_STUDENT, details, {\n      headers: {\n        'Authorization': `Bearer ${Auth.retriveToken()}`\n      }\n    });\n\n    if (response.data.success) {\n      dispatch({\n        type: ActionTypes.GET_TEST_RESULT_STUDENT,\n        payload: {\n          test: response.data.result\n        }\n      });\n    } else {\n      dispatch({\n        type: ActionTypes.SET_ALERT,\n        payload: {\n          isAlert: true,\n          type: 'error',\n          title: 'Error',\n          message: response.data.message\n        }\n      });\n    }\n  };\n};\nexport const getQuestionAnswerActionStudent = details => {\n  return async dispatch => {\n    var response = await axios.post(apis.BASE + apis.GET_RESULT_QUESTIONS_STUDENTS, details, {\n      headers: {\n        'Authorization': `Bearer ${Auth.retriveToken()}`\n      }\n    });\n    console.log(response.data);\n\n    if (response.data.success) {\n      dispatch({\n        type: ActionTypes.GET_RESULT_QUESTIONS_STUDENTS,\n        payload: {\n          questions: response.data.questions\n        }\n      });\n    } else {\n      dispatch({\n        type: ActionTypes.SET_ALERT,\n        payload: {\n          isAlert: true,\n          type: 'error',\n          title: 'Error',\n          message: response.data.message\n        }\n      });\n    }\n  };\n};","map":{"version":3,"names":["axios","apis","Auth","ActionTypes","getAllTestStudentAction","dispatch","response","get","BASE","GET_ALL_TEST_STUDNET","headers","retriveToken","console","log","data","success","type","GET_ALL_TESTS","payload","testlist","getUpcomingTestsStudentAction","GET_UPCOMING_TESTS_STUDENT","upcomingtestlist","getCompletedTestsStudentAction","GET_ALL_COMPLETED_TEST_STUDENT","completedtestlist","studentTestRegister","details","post","STUDENT_TEST_REGISTER","then","CHANGE_TEST_REGISTER","id","testid","error","SET_ALERT","isAlert","title","message","getTestById","GET_TEST_DETAILS_BY_ID","VIEW_TEST_DETAILS","test","getTestResultStudent","GET_TEST_RESULT_STUDENT","result","getQuestionAnswerActionStudent","GET_RESULT_QUESTIONS_STUDENTS","questions"],"sources":["D:/Quiz/user-portal-frontend/src/redux/actions/studentTestAction.js"],"sourcesContent":["import axios from \"axios\"\nimport apis from \"../../helper/Apis\"\nimport Auth from \"../../helper/Auth\"\nimport { ActionTypes } from \"../action-types\"\n\n\nexport const getAllTestStudentAction = () => {\n  return async(dispatch) => {\n    const response = await axios.get(apis.BASE + apis.GET_ALL_TEST_STUDNET,{\n      headers:{\n        'Authorization':`Bearer ${Auth.retriveToken()}`\n      }\n    });\n    console.log(response.data);\n    if(response.data.success) {\n      \n      dispatch({\n        type : ActionTypes.GET_ALL_TESTS,\n        payload : {\n          testlist : response.data.testlist\n        }\n      })\n    }\n  }\n}\n\nexport const getUpcomingTestsStudentAction = () => {\n  return async(dispatch) => {\n    const response = await axios.get(apis.BASE + apis.GET_UPCOMING_TESTS_STUDENT,{\n      headers:{\n        'Authorization':`Bearer ${Auth.retriveToken()}`\n      }\n    });\n    if(response.data.success) {\n      \n      dispatch({\n        type : ActionTypes.GET_UPCOMING_TESTS_STUDENT,\n        payload : {\n          testlist : response.data.upcomingtestlist\n        }\n      })\n    }\n  }\n}\n\nexport const getCompletedTestsStudentAction = () => {\n  return async(dispatch) => {\n    const response = await axios.get(apis.BASE + apis.GET_ALL_COMPLETED_TEST_STUDENT,{\n      headers:{\n        'Authorization':`Bearer ${Auth.retriveToken()}`\n      }\n    });\n    if(response.data.success) {\n      dispatch({\n        type : ActionTypes.GET_ALL_COMPLETED_TEST_STUDENT,\n        payload : {\n          testlist : response.data.completedtestlist\n        }\n      })\n    }\n  }\n}\n\nexport const studentTestRegister = (details) => {\n  return async(dispatch)=>{\n    axios.post(apis.BASE + apis.STUDENT_TEST_REGISTER,details, {\n      headers : {\n        'Authorization':`Bearer ${Auth.retriveToken()}`\n      }\n    }).then(response => {\n      if(response.data.success) {\n        dispatch({\n          type : ActionTypes.CHANGE_TEST_REGISTER,\n          payload : {\n            id: details.testid\n          }\n        })   \n      } else {\n        console.error(response.data);\n        dispatch({\n          type:ActionTypes.SET_ALERT,\n          payload : {\n            isAlert:true,\n            type : 'error',\n            title : 'error in change status',\n            message : response.data.message\n          }\n        })\n      }\n    })\n  }\n}\n\nexport const getTestById = (details) => {\n  return async(dispatch) => {\n    const response = await axios.post(apis.BASE+ apis.GET_TEST_DETAILS_BY_ID,details,{\n      headers:{\n        'Authorization':`Bearer ${Auth.retriveToken()}`\n      }\n    })\n    if(response.data.success) {\n      dispatch({\n        type:ActionTypes.VIEW_TEST_DETAILS,\n        payload : {\n          test : response.data.test\n        }\n      })\n    } else {\n      dispatch({\n        type:ActionTypes.SET_ALERT,\n        payload : {\n          isAlert : true,\n          title : \"Could not get test details\",\n          type : \"error\",\n          message : response.data.message\n        }\n      })\n    }\n  }\n}\n\nexport const getTestResultStudent = (details) => {\n\n  return async(dispatch)=> {\n    var response = await axios.post(apis.BASE + apis.GET_TEST_RESULT_STUDENT,details,{\n      headers:{\n        'Authorization':`Bearer ${Auth.retriveToken()}`\n      }\n    })\n    if(response.data.success){\n      dispatch({\n        type : ActionTypes.GET_TEST_RESULT_STUDENT,\n        payload : {\n          test : response.data.result\n        }\n      })\n    } else {\n      dispatch({\n        type : ActionTypes.SET_ALERT,\n        payload : {\n          isAlert : true,\n          type : 'error',\n          title : 'Error',\n          message : response.data.message\n        }\n      })\n    }\n    \n  }\n}\n\n\nexport const getQuestionAnswerActionStudent = (details) => {\n  return async(dispatch) => {\n    var response = await axios.post(apis.BASE + apis.GET_RESULT_QUESTIONS_STUDENTS, details, {\n      headers:{\n        'Authorization':`Bearer ${Auth.retriveToken()}`\n      }\n    })\n    console.log(response.data);\n    if(response.data.success) {\n      dispatch({\n        type : ActionTypes.GET_RESULT_QUESTIONS_STUDENTS,\n        payload : {\n          questions : response.data.questions\n        }\n      })\n    } else {\n      dispatch({\n        type : ActionTypes.SET_ALERT,\n        payload : {\n          isAlert : true,\n          type : 'error',\n          title : 'Error',\n          message : response.data.message\n        }\n      })\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}