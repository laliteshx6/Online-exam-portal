{"ast":null,"code":"var _jsxFileName = \"D:\\\\Quiz\\\\admin\\\\src\\\\components\\\\Dashboard\\\\subjectTable\\\\subjectTable.js\";\nimport { connect } from \"react-redux\";\nimport React from \"react\";\nimport { getSubjectDetails, SubjectToggleStatus } from \"../../../redux/actions/subjectDetails\";\nimport './subjectTable.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SubjectTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  handleStatusChange(status, id) {\n    let actionText = status ? 'block' : 'unblock'; // Determine the action text based on the status\n\n    const confirmed = window.confirm(`Are you sure you want to ${actionText} this Teacher?`);\n\n    if (confirmed) {\n      // Logic to toggle the user's status (block/unblock) goes here\n      // Display a confirmation alert after the action\n      alert(`User has been ${actionText}ed.`);\n      this.props.TeacherToggleStatus(status, id, this.props.getTeacherDetails);\n    }\n  }\n\n  buttonTextBasedOnStatus(status) {\n    if (status === true) {\n      return \"block\";\n    } else {\n      return \"unblock\";\n    }\n  }\n\n  render() {\n    if (this.props.subjects.retrived === false) {\n      this.props.getSubjectDetails();\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Collecting data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"title\",\n        children: \"Subjects\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Action\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.props.subjects.list.map((val, key) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: val.subject\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: val.status.toString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => this.handleStatusChange(val.status, val.id),\n                  children: this.buttonTextBasedOnStatus(val.status)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 17\n              }, this)]\n            }, key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  subjects: state.subjects\n});\n\nexport default connect(mapStateToProps, {\n  getSubjectDetails,\n  SubjectToggleStatus\n})(SubjectTable);","map":{"version":3,"sources":["D:/Quiz/admin/src/components/Dashboard/subjectTable/subjectTable.js"],"names":["connect","React","getSubjectDetails","SubjectToggleStatus","SubjectTable","Component","constructor","props","state","handleStatusChange","status","id","actionText","confirmed","window","confirm","alert","TeacherToggleStatus","getTeacherDetails","buttonTextBasedOnStatus","render","subjects","retrived","list","map","val","key","subject","toString","mapStateToProps"],"mappings":"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","sourcesContent":["import { connect } from \"react-redux\"\nimport React from \"react\";\nimport {getSubjectDetails, SubjectToggleStatus}  from \"../../../redux/actions/subjectDetails\";\nimport './subjectTable.css'\n\n\nclass SubjectTable extends React.Component {\n    constructor(props) {\n      super(props)\n      this.state = {}\n    }\n\n    \n    handleStatusChange(status, id) {\n      let actionText = status ? 'block' : 'unblock'; // Determine the action text based on the status\n    \n      const confirmed = window.confirm(`Are you sure you want to ${actionText} this Teacher?`);\n      if (confirmed) {\n        // Logic to toggle the user's status (block/unblock) goes here\n    \n        // Display a confirmation alert after the action\n        alert(`User has been ${actionText}ed.`);\n        this.props.TeacherToggleStatus(status, id, this.props.getTeacherDetails);\n      }\n    }\n    \n\n    buttonTextBasedOnStatus(status) {\n      if(status === true) {\n        return(\"block\");\n      } else {\n        return(\"unblock\");\n      }\n    }\n\n    render(){\n      if(this.props.subjects.retrived===false) {\n        this.props.getSubjectDetails();\n        return (<div>Collecting data</div>);\n      }\n\n      return (\n      <div className=\"main\">\n        <h2 className=\"title\">Subjects</h2> \n        <table>\n          <thead>\n          <tr>\n            <th>Name</th>\n            <th>Status</th>\n            <th>Action</th>\n          </tr>\n          </thead>\n          <tbody>\n          {this.props.subjects.list.map((val,key)=>{\n            return (\n              <tr key={key}>\n                <td>{val.subject}</td>\n                <td>{val.status.toString()}</td>\n        \n                <td><button onClick={()=>(this.handleStatusChange(val.status,val.id))}>{this.buttonTextBasedOnStatus(val.status)}</button></td>\n              </tr>\n            )\n          })}\n          </tbody>\n        </table>\n      </div>)\n    }\n}\n\nconst mapStateToProps = state => ({\n  subjects : state.subjects\n});\n\nexport default connect(mapStateToProps,{\n  getSubjectDetails,\n  SubjectToggleStatus\n})(SubjectTable);"]},"metadata":{},"sourceType":"module"}